# -*- coding: utf-8 -*-
"""kuggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AZ328VaKY-jmUXm4PFSCRSmSJw_coJ0_
"""

import pandas as pd
import numpy as np
from sklearn import linear_model
from sklearn.model_selection import KFold
from sklearn.metrics import roc_auc_score
from sklearn import ensemble
import math

def sigmoid(x):
  return 1 / (1 + np.exp(-x))

# Load the data
df_train = (pd.read_csv('train.csv').drop(columns=['id', 'opened_position_qty ', 'closed_position_qty', 'y']).to_numpy(), pd.read_csv('train.csv', usecols=['y']).to_numpy())

data, labels = df_train

num_folds = 5
kf = KFold(n_splits = num_folds)
r1 = linear_model.Ridge()
r2 = linear_model.Lasso()
r3 = linear_model.BayesianRidge()
r4 = linear_model.OrthogonalMatchingPursuit()
r5 = linear_model.PassiveAggressiveRegressor()
r6 = linear_model.ElasticNet()
r7 = ensemble.AdaBoostRegressor()
# er = ensemble.StackingRegressor([('ridge', r1), ('lasso', r2), ('bayes', r3), ('omp', r4), ('par', r5), ('enet', r6)])
er = ensemble.StackingRegressor([('ridge', r1), ('adaboost', r7)])
train_errors = []
test_scores = []

# Iterate over each fold
for train_index, test_index in kf.split(data):
    x_train, x_test = data[train_index], data[test_index]
    y_train, y_test = labels[train_index], labels[test_index]
    
    # Fit the training data
    er.fit(x_train, y_train)

    print(".")
    
    # Calculate the training error for this fold
    train_prediction = er.predict(x_train)
    train_error = 0
    for i in range(y_train.size):
        train_error += ((y_train[i] - train_prediction[i]) ** 2)
        
    # Calculate the validation score for this fold
    vscore = roc_auc_score(y_test, sigmoid(er.predict(x_test)))
        
    train_errors.append(train_error / y_train.size)
    test_scores.append(vscore)

print("The average training error is {}".format(np.mean(train_errors)))
print("The average test score is {}".format(np.mean(test_scores)))
# 0.6475981341167731

test_x = pd.read_csv('test.csv').drop(columns=['id', 'opened_position_qty ', 'closed_position_qty']).to_numpy()
df_test = pd.read_csv('test.csv', index_col=0)
df_test['Predicted'] = sigmoid(er.predict(test_x))
df_test[['Predicted']].to_csv('submission3.csv')

